{"version":3,"file":"static/js/406.acf4a1bb.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Button/button.module.scss?3bf9","components/Button/Button.jsx","webpack://react-homework-template/./src/components/TextField/textField.module.scss?005a","components/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js","hooks/useForm.js","components/RegisrerForm/fields.js","components/RegisrerForm/initialState.js","webpack://react-homework-template/./src/components/RegisrerForm/registerForm.module.scss?5ca4","components/RegisrerForm/RegisterForm.jsx","page/RegisterPage/RegisterPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button_button__zpxkc\"};","import style from \"./button.module.scss\";\n\nconst Button = ({ children, type= \"submit\" }) => {\n    return <button type={type} className={style.button}>{ children}</button>\n}\nexport default Button;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"textField_wrapper__BBbYh\",\"field\":\"textField_field__CXIOL\"};","\nimport { useMemo } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport styles from \"./textField.module.scss\";\n\n\nconst TextField = ({label, handleChange, ...props}) => {\n    const id = useMemo(()=> nanoid(), []);\n\n    return (\n        <div className={styles.wrapper}>\n            <label htmlFor={id}>{label}</label>\n            <input className={styles.field} id={id} onChange={handleChange} {...props} />\n        </div>\n    )\n}\n\nexport default TextField;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState, useCallback } from \"react\";\n\nconst useForm = ({initialState, onSubmit})=> {\n    const [state, setState] = useState({...initialState})\n\n    const handleChange = useCallback(({target}) => {\n        const {name, value} = target;\n        setState(prevState => {\n            return {...prevState, [name]: value}\n        })\n    }, [setState]);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;","const fields = {\n    name: {\n        type: \"text\",\n        name: \"name\",\n        require: \"true\",\n        label: \"Name\",\n        placeholder: \"Name\"\n    },\n       email: {\n        type: \"email\",\n        name: \"email\",\n        require: \"true\",\n        label: \"Email\",\n        placeholder: \"Email\"\n    },\n       password: {\n        type: \"password\",\n        name: \"password\",\n        require: \"true\",\n        label: \"Password\",\n        placeholder: \"Password\"\n    },\n}\nexport default fields;","const initialState = {\n    name: \"\",\n    email: \"\",\n    password:\"\"\n}\n\nexport default initialState;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"registerForm_container__xRjNY\"};","import TextField from \"components/TextField/TextField\";\nimport Button from \"components/Button/Button\";\nimport useForm from \"hooks/useForm\";\nimport fields from \"./fields\";\nimport initialState from \"./initialState\";\nimport styles from \"./registerForm.module.scss\"\n\nconst RegisterForm = ({ onSubmit }) => {\n    const { state, handleChange, handleSubmit } = useForm({ initialState, onSubmit });\n    const { name, email, password } = state;\n    return (\n        <form onSubmit={handleSubmit} className={styles.container}>\n            <TextField value={name} handleChange={ handleChange} {...fields.name} />\n            <TextField value={email} handleChange={ handleChange} {...fields.email} />\n            <TextField value={password} handleChange={handleChange} {...fields.password} />\n            <Button>Register</Button>\n        </form>\n    )\n}\nexport default RegisterForm;","\nimport { Box, Heading } from 'rebass';\nimport { useDispatch } from 'react-redux';\nimport RegisterForm from '../../components/RegisrerForm/RegisterForm';\nimport { signup } from 'redux/Auth/auth-operations';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const handleSignup = (data) => {\n    dispatch(signup(data));\n  };\n\n  return (\n    <Box\n      sx={{\n        backgroundImage: `linear-gradient(to right, #3a6186, #89253e)`,\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n              alignItems: 'center',\n       \n      }}\n    >\n      <Box\n        sx={{\n            color: \"white\",\n            py: [4, 5, 6],\n            borderColor: \"white\",\n             marginBottom: 150,\n        }}\n      >\n        <Heading mb={3} sx={{ textAlign: 'center', fontSize: [4, 5, 6], }}>\n          Registration\n        </Heading>\n        <RegisterForm onSubmit={handleSignup} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["children","type","className","style","label","handleChange","props","id","useMemo","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","styles","htmlFor","onChange","initialState","onSubmit","useState","state","setState","useCallback","target","name","value","prevState","handleSubmit","e","preventDefault","require","placeholder","email","password","useForm","TextField","fields","Button","dispatch","useDispatch","sx","backgroundImage","height","display","justifyContent","alignItems","color","py","borderColor","marginBottom","mb","textAlign","fontSize","data","signup"],"sourceRoot":""}